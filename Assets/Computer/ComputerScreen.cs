using UnityEngine;
using UnityEngine.UI;

[RequireComponent(typeof(ComputerMemory))]
public class ComputerScreen : MonoBehaviour {

    public RawImage renderImage;

    const uint videoMemStart = DeviceMemoryMap.VM_VideoMemoryStart;
    const uint modeTrigger = DeviceMemoryMap.VM_VideoModeTrigger;
    const uint charsetStart = DeviceMemoryMap.VM_TextModeCharsetStart;
    const uint charsetEnd = DeviceMemoryMap.VM_TextModeCharsetEnd;
    const uint paletteStart = DeviceMemoryMap.VM_PaletteStart;
    const uint paletteEnd = DeviceMemoryMap.VM_PaletteEnd;

    static uint memEnd = 0;

    const int textWidth = 80;
    const int textHeight = 60;
    const int charWidth = 8;
    const int charHeight = 8;
    const int textTextureWidth = textWidth * charWidth;
    const int textTextureHeight = textHeight * charHeight;

    [HideInInspector]
    public bool isReady = false;

    byte[] DefaultCharset = new byte[2048]
    {
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x3C, 0x3C, 0x18, 0x18, 0x00, 0x18, 0x00,
        0x66, 0x66, 0x24, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x6C, 0x6C, 0xFE, 0x6C, 0xFE, 0x6C, 0x6C, 0x00,
        0x18, 0x3E, 0x60, 0x3C, 0x06, 0x7C, 0x18, 0x00,
        0x00, 0xC6, 0xCC, 0x18, 0x30, 0x66, 0xC6, 0x00,
        0x38, 0x6C, 0x38, 0x76, 0xDC, 0xCC, 0x76, 0x00,
        0x18, 0x18, 0x30, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x0C, 0x18, 0x30, 0x30, 0x30, 0x18, 0x0C, 0x00,
        0x30, 0x18, 0x0C, 0x0C, 0x0C, 0x18, 0x30, 0x00,
        0x00, 0x66, 0x3C, 0xFF, 0x3C, 0x66, 0x00, 0x00,
        0x00, 0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x30,
        0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x18, 0x18, 0x00,
        0x06, 0x0C, 0x18, 0x30, 0x60, 0xC0, 0x80, 0x00,
        0x38, 0x6C, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
        0x18, 0x38, 0x18, 0x18, 0x18, 0x18, 0x7E, 0x00,
        0x7C, 0xC6, 0x06, 0x1C, 0x30, 0x66, 0xFE, 0x00,
        0x7C, 0xC6, 0x06, 0x3C, 0x06, 0xC6, 0x7C, 0x00,
        0x1C, 0x3C, 0x6C, 0xCC, 0xFE, 0x0C, 0x1E, 0x00,
        0xFE, 0xC0, 0xC0, 0xFC, 0x06, 0xC6, 0x7C, 0x00,
        0x38, 0x60, 0xC0, 0xFC, 0xC6, 0xC6, 0x7C, 0x00,
        0xFE, 0xC6, 0x0C, 0x18, 0x30, 0x30, 0x30, 0x00,
        0x7C, 0xC6, 0xC6, 0x7C, 0xC6, 0xC6, 0x7C, 0x00,
        0x7C, 0xC6, 0xC6, 0x7E, 0x06, 0x0C, 0x78, 0x00,
        0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x00,
        0x00, 0x18, 0x18, 0x00, 0x00, 0x18, 0x18, 0x30,
        0x06, 0x0C, 0x18, 0x30, 0x18, 0x0C, 0x06, 0x00,
        0x00, 0x00, 0x7E, 0x00, 0x00, 0x7E, 0x00, 0x00,
        0x60, 0x30, 0x18, 0x0C, 0x18, 0x30, 0x60, 0x00,
        0x7C, 0xC6, 0x0C, 0x18, 0x18, 0x00, 0x18, 0x00,
        0x7C, 0xC6, 0xDE, 0xDE, 0xDE, 0xC0, 0x78, 0x00,
        0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00,
        0xFC, 0x66, 0x66, 0x7C, 0x66, 0x66, 0xFC, 0x00,
        0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x00,
        0xF8, 0x6C, 0x66, 0x66, 0x66, 0x6C, 0xF8, 0x00,
        0xFE, 0x62, 0x68, 0x78, 0x68, 0x62, 0xFE, 0x00,
        0xFE, 0x62, 0x68, 0x78, 0x68, 0x60, 0xF0, 0x00,
        0x3C, 0x66, 0xC0, 0xC0, 0xCE, 0x66, 0x3A, 0x00,
        0xC6, 0xC6, 0xC6, 0xFE, 0xC6, 0xC6, 0xC6, 0x00,
        0x3C, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x1E, 0x0C, 0x0C, 0x0C, 0xCC, 0xCC, 0x78, 0x00,
        0xE6, 0x66, 0x6C, 0x78, 0x6C, 0x66, 0xE6, 0x00,
        0xF0, 0x60, 0x60, 0x60, 0x62, 0x66, 0xFE, 0x00,
        0xC6, 0xEE, 0xFE, 0xFE, 0xD6, 0xC6, 0xC6, 0x00,
        0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0xC6, 0xC6, 0x00,
        0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0xFC, 0x66, 0x66, 0x7C, 0x60, 0x60, 0xF0, 0x00,
        0x7C, 0xC6, 0xC6, 0xC6, 0xC6, 0xCE, 0x7C, 0x0E,
        0xFC, 0x66, 0x66, 0x7C, 0x6C, 0x66, 0xE6, 0x00,
        0x3C, 0x66, 0x30, 0x18, 0x0C, 0x66, 0x3C, 0x00,
        0x7E, 0x7E, 0x5A, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0xC6, 0xC6, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
        0xC6, 0xC6, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00,
        0xC6, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0xC6, 0x00,
        0x66, 0x66, 0x66, 0x3C, 0x18, 0x18, 0x3C, 0x00,
        0xFE, 0xC6, 0x8C, 0x18, 0x32, 0x66, 0xFE, 0x00,
        0x3C, 0x30, 0x30, 0x30, 0x30, 0x30, 0x3C, 0x00,
        0xC0, 0x60, 0x30, 0x18, 0x0C, 0x06, 0x02, 0x00,
        0x3C, 0x0C, 0x0C, 0x0C, 0x0C, 0x0C, 0x3C, 0x00,
        0x10, 0x38, 0x6C, 0xC6, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0xFF,
        0x30, 0x18, 0x0C, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
        0xE0, 0x60, 0x7C, 0x66, 0x66, 0x66, 0xDC, 0x00,
        0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x00,
        0x1C, 0x0C, 0x7C, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
        0x00, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00,
        0x3C, 0x66, 0x60, 0xF8, 0x60, 0x60, 0xF0, 0x00,
        0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0xF8,
        0xE0, 0x60, 0x6C, 0x76, 0x66, 0x66, 0xE6, 0x00,
        0x18, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x06, 0x00, 0x06, 0x06, 0x06, 0x66, 0x66, 0x3C,
        0xE0, 0x60, 0x66, 0x6C, 0x78, 0x6C, 0xE6, 0x00,
        0x38, 0x18, 0x18, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x00, 0x00, 0xEC, 0xFE, 0xD6, 0xD6, 0xD6, 0x00,
        0x00, 0x00, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x00,
        0x00, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x00, 0x00, 0xDC, 0x66, 0x66, 0x7C, 0x60, 0xF0,
        0x00, 0x00, 0x76, 0xCC, 0xCC, 0x7C, 0x0C, 0x1E,
        0x00, 0x00, 0xDC, 0x76, 0x60, 0x60, 0xF0, 0x00,
        0x00, 0x00, 0x7E, 0xC0, 0x7C, 0x06, 0xFC, 0x00,
        0x30, 0x30, 0xFC, 0x30, 0x30, 0x36, 0x1C, 0x00,
        0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
        0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x6C, 0x38, 0x00,
        0x00, 0x00, 0xC6, 0xD6, 0xD6, 0xFE, 0x6C, 0x00,
        0x00, 0x00, 0xC6, 0x6C, 0x38, 0x6C, 0xC6, 0x00,
        0x00, 0x00, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0xFC,
        0x00, 0x00, 0x7E, 0x4C, 0x18, 0x32, 0x7E, 0x00,
        0x0E, 0x18, 0x18, 0x70, 0x18, 0x18, 0x0E, 0x00,
        0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x18, 0x00,
        0x70, 0x18, 0x18, 0x0E, 0x18, 0x18, 0x70, 0x00,
        0x76, 0xDC, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x00, 0x18, 0x18, 0x3C, 0x3C, 0x18, 0x00,
        0x00, 0x10, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x10,
        0x3C, 0x42, 0x40, 0xF8, 0x40, 0x62, 0x9C, 0x00,
        0x00, 0x00, 0xBA, 0x44, 0xC6, 0x44, 0xBA, 0x00,
        0x82, 0x44, 0x28, 0x7C, 0x10, 0x7C, 0x10, 0x10,
        0x10, 0x10, 0x10, 0x00, 0x10, 0x10, 0x10, 0x00,
        0x3C, 0x42, 0x38, 0x44, 0x22, 0x1C, 0x42, 0x3C,
        0x44, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x7C, 0x44, 0x5C, 0x5C, 0x5C, 0x44, 0x7C, 0x00,
        0xC0, 0x20, 0xE0, 0xA0, 0xE0, 0x00, 0x00, 0x00,
        0x12, 0x24, 0x48, 0x90, 0x48, 0x24, 0x12, 0x00,
        0x00, 0x00, 0xFE, 0x02, 0x02, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x7E, 0x00, 0x00, 0x00,
        0x7C, 0x44, 0x54, 0x4C, 0x54, 0x54, 0x7C, 0x00,
        0xFE, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x20, 0x50, 0x20, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x18, 0x18, 0x7E, 0x18, 0x18, 0x00, 0x7E, 0x00,
        0x40, 0xA0, 0x20, 0x40, 0xE0, 0x00, 0x00, 0x00,
        0xC0, 0x20, 0x40, 0x20, 0xC0, 0x00, 0x00, 0x00,
        0x08, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0xF6, 0xC0,
        0x7E, 0xF4, 0xF4, 0x74, 0x14, 0x14, 0x14, 0x14,
        0x00, 0x00, 0x00, 0x10, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x60,
        0x60, 0xE0, 0x20, 0x20, 0x20, 0x00, 0x00, 0x00,
        0x40, 0xA0, 0xA0, 0xA0, 0x40, 0x00, 0x00, 0x00,
        0x90, 0x48, 0x24, 0x12, 0x24, 0x48, 0x90, 0x00,
        0x42, 0xC4, 0x48, 0x54, 0x2C, 0x54, 0x9E, 0x04,
        0x42, 0xC4, 0x48, 0x56, 0x22, 0x46, 0x84, 0x06,
        0xC2, 0x44, 0xC8, 0x54, 0xEC, 0x54, 0x9E, 0x04,
        0x30, 0x00, 0x30, 0x30, 0x60, 0xC6, 0x7C, 0x00,
        0x20, 0x10, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x00,
        0x08, 0x10, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x00,
        0x10, 0x28, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x00,
        0x76, 0xDC, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x00,
        0x44, 0x00, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x00,
        0x38, 0x28, 0x38, 0x6C, 0xC6, 0xFE, 0xC6, 0x00,
        0x3E, 0x28, 0x48, 0x7E, 0x48, 0x88, 0x8E, 0x00,
        0x3C, 0x66, 0xC0, 0xC0, 0xC0, 0x66, 0x3C, 0x60,
        0x20, 0x10, 0x7E, 0x60, 0x78, 0x60, 0x7E, 0x00,
        0x08, 0x10, 0x7E, 0x60, 0x78, 0x60, 0x7E, 0x00,
        0x10, 0x28, 0x7E, 0x60, 0x78, 0x60, 0x7E, 0x00,
        0x24, 0x00, 0x7E, 0x60, 0x78, 0x60, 0x7E, 0x00,
        0x20, 0x10, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x04, 0x08, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x18, 0x24, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x24, 0x00, 0x3C, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0xF8, 0x6C, 0x66, 0xF6, 0x66, 0x6C, 0xF8, 0x00,
        0x76, 0xDC, 0xC6, 0xE6, 0xF6, 0xDE, 0xCE, 0x00,
        0x20, 0x10, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x08, 0x10, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x10, 0x28, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x76, 0xDC, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x44, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x00, 0x00, 0x44, 0x28, 0x10, 0x28, 0x44, 0x00,
        0x7E, 0xC6, 0xCE, 0xD6, 0xE6, 0xC6, 0xFC, 0x00,
        0x20, 0x10, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x08, 0x10, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x10, 0x28, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x44, 0x00, 0xC6, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x08, 0x10, 0x66, 0x66, 0x3C, 0x18, 0x3C, 0x00,
        0x40, 0x7C, 0x42, 0x42, 0x42, 0x7C, 0x40, 0x00,
        0x00, 0x38, 0x44, 0x44, 0x5C, 0x42, 0x52, 0x4C,
        0x20, 0x10, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
        0x10, 0x20, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
        0x10, 0x28, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
        0x76, 0xDC, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
        0x44, 0x00, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
        0x38, 0x28, 0x78, 0x0C, 0x7C, 0xCC, 0x76, 0x00,
        0x00, 0x00, 0x76, 0x1A, 0x7E, 0xD8, 0x6E, 0x00,
        0x00, 0x00, 0x7C, 0xC6, 0xC0, 0xC6, 0x7C, 0x60,
        0x20, 0x10, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00,
        0x08, 0x10, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00,
        0x10, 0x28, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00,
        0x44, 0x00, 0x7C, 0xC6, 0xFE, 0xC0, 0x7C, 0x00,
        0x20, 0x10, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x04, 0x08, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x18, 0x24, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x24, 0x00, 0x38, 0x18, 0x18, 0x18, 0x3C, 0x00,
        0x38, 0x0C, 0x7E, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x76, 0xDC, 0xDC, 0x66, 0x66, 0x66, 0x66, 0x00,
        0x20, 0x10, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x08, 0x10, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x10, 0x28, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x76, 0xDC, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x44, 0x00, 0x7C, 0xC6, 0xC6, 0xC6, 0x7C, 0x00,
        0x00, 0x00, 0x10, 0x00, 0x7C, 0x00, 0x10, 0x00,
        0x00, 0x02, 0x7C, 0xCE, 0xD6, 0xE6, 0x7C, 0x80,
        0x20, 0x10, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
        0x10, 0x20, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
        0x30, 0x48, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
        0x48, 0x00, 0xCC, 0xCC, 0xCC, 0xCC, 0x76, 0x00,
        0x08, 0x10, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0xFC,
        0x00, 0x40, 0x78, 0x44, 0x44, 0x78, 0x40, 0x00,
        0x44, 0x00, 0xC6, 0xC6, 0xC6, 0x7E, 0x06, 0xFC,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00,
    };

    byte[] DefaultPalette256 = new byte[768]
    {
        0, 0, 0,
        128, 0, 0,
        0, 128, 0,
        128, 128, 0,
        0, 0, 128,
        128, 0, 128,
        0, 128, 128,
        192, 192, 192,
        128, 128, 128,
        255, 0, 0,
        0, 255, 0,
        255, 255, 0,
        0, 0, 255,
        255, 0, 255,
        0, 255, 255,
        255, 255, 255,
        0, 0, 0,
        0, 0, 95,
        0, 0, 135,
        0, 0, 175,
        0, 0, 215,
        0, 0, 255,
        0, 95, 0,
        0, 95, 95,
        0, 95, 135,
        0, 95, 175,
        0, 95, 215,
        0, 95, 255,
        0, 135, 0,
        0, 135, 95,
        0, 135, 135,
        0, 135, 175,
        0, 135, 215,
        0, 135, 255,
        0, 175, 0,
        0, 175, 95,
        0, 175, 135,
        0, 175, 175,
        0, 175, 215,
        0, 175, 255,
        0, 215, 0,
        0, 215, 95,
        0, 215, 135,
        0, 215, 175,
        0, 215, 215,
        0, 215, 255,
        0, 255, 0,
        0, 255, 95,
        0, 255, 135,
        0, 255, 175,
        0, 255, 215,
        0, 255, 255,
        95, 0, 0,
        95, 0, 95,
        95, 0, 135,
        95, 0, 175,
        95, 0, 215,
        95, 0, 255,
        95, 95, 0,
        95, 95, 95,
        95, 95, 135,
        95, 95, 175,
        95, 95, 215,
        95, 95, 255,
        95, 135, 0,
        95, 135, 95,
        95, 135, 135,
        95, 135, 175,
        95, 135, 215,
        95, 135, 255,
        95, 175, 0,
        95, 175, 95,
        95, 175, 135,
        95, 175, 175,
        95, 175, 215,
        95, 175, 255,
        95, 215, 0,
        95, 215, 95,
        95, 215, 135,
        95, 215, 175,
        95, 215, 215,
        95, 215, 255,
        95, 255, 0,
        95, 255, 95,
        95, 255, 135,
        95, 255, 175,
        95, 255, 215,
        95, 255, 255,
        135, 0, 0,
        135, 0, 95,
        135, 0, 135,
        135, 0, 175,
        135, 0, 215,
        135, 0, 255,
        135, 95, 0,
        135, 95, 95,
        135, 95, 135,
        135, 95, 175,
        135, 95, 215,
        135, 95, 255,
        135, 135, 0,
        135, 135, 95,
        135, 135, 135,
        135, 135, 175,
        135, 135, 215,
        135, 135, 255,
        135, 175, 0,
        135, 175, 95,
        135, 175, 135,
        135, 175, 175,
        135, 175, 215,
        135, 175, 255,
        135, 215, 0,
        135, 215, 95,
        135, 215, 135,
        135, 215, 175,
        135, 215, 215,
        135, 215, 255,
        135, 255, 0,
        135, 255, 95,
        135, 255, 135,
        135, 255, 175,
        135, 255, 215,
        135, 255, 255,
        175, 0, 0,
        175, 0, 95,
        175, 0, 135,
        175, 0, 175,
        175, 0, 215,
        175, 0, 255,
        175, 95, 0,
        175, 95, 95,
        175, 95, 135,
        175, 95, 175,
        175, 95, 215,
        175, 95, 255,
        175, 135, 0,
        175, 135, 95,
        175, 135, 135,
        175, 135, 175,
        175, 135, 215,
        175, 135, 255,
        175, 175, 0,
        175, 175, 95,
        175, 175, 135,
        175, 175, 175,
        175, 175, 215,
        175, 175, 255,
        175, 215, 0,
        175, 215, 95,
        175, 215, 135,
        175, 215, 175,
        175, 215, 215,
        175, 215, 255,
        175, 255, 0,
        175, 255, 95,
        175, 255, 135,
        175, 255, 175,
        175, 255, 215,
        175, 255, 255,
        215, 0, 0,
        215, 0, 95,
        215, 0, 135,
        215, 0, 175,
        215, 0, 215,
        215, 0, 255,
        215, 95, 0,
        215, 95, 95,
        215, 95, 135,
        215, 95, 175,
        215, 95, 215,
        215, 95, 255,
        215, 135, 0,
        215, 135, 95,
        215, 135, 135,
        215, 135, 175,
        215, 135, 215,
        215, 135, 255,
        215, 175, 0,
        215, 175, 95,
        215, 175, 135,
        215, 175, 175,
        215, 175, 215,
        215, 175, 255,
        215, 215, 0,
        215, 215, 95,
        215, 215, 135,
        215, 215, 175,
        215, 215, 215,
        215, 215, 255,
        215, 255, 0,
        215, 255, 95,
        215, 255, 135,
        215, 255, 175,
        215, 255, 215,
        215, 255, 255,
        255, 0, 0,
        255, 0, 95,
        255, 0, 135,
        255, 0, 175,
        255, 0, 215,
        255, 0, 255,
        255, 95, 0,
        255, 95, 95,
        255, 95, 135,
        255, 95, 175,
        255, 95, 215,
        255, 95, 255,
        255, 135, 0,
        255, 135, 95,
        255, 135, 135,
        255, 135, 175,
        255, 135, 215,
        255, 135, 255,
        255, 175, 0,
        255, 175, 95,
        255, 175, 135,
        255, 175, 175,
        255, 175, 215,
        255, 175, 255,
        255, 215, 0,
        255, 215, 95,
        255, 215, 135,
        255, 215, 175,
        255, 215, 215,
        255, 215, 255,
        255, 255, 0,
        255, 255, 95,
        255, 255, 135,
        255, 255, 175,
        255, 255, 215,
        255, 255, 255,
        8, 8, 8,
        18, 18, 18,
        28, 28, 28,
        38, 38, 38,
        48, 48, 48,
        58, 58, 58,
        68, 68, 68,
        78, 78, 78,
        88, 88, 88,
        98, 98, 98,
        108, 108, 108,
        118, 118, 118,
        128, 128, 128,
        138, 138, 138,
        148, 148, 148,
        158, 158, 158,
        168, 168, 168,
        178, 178, 178,
        188, 188, 188,
        198, 198, 198,
        208, 208, 208,
        218, 218, 218,
        228, 228, 228,
        238, 238, 238,
    };

    class GraphicsMode
    {
        public Texture2D texture;
        public ComputerMemory.MemoryRange range;
        public int pixelsPerByte;
        public Color[] pixels;
        public GraphicsMode(int width, int height, int pixelsPerByte)
        {
            this.pixelsPerByte = pixelsPerByte;
            texture = new Texture2D(width, height);
            texture.filterMode = FilterMode.Point;
            texture.wrapMode = TextureWrapMode.Clamp;
            pixels = new Color[width * height];
            uint size = (uint)(width * height / pixelsPerByte);
            range = new ComputerMemory.MemoryRange(videoMemStart, videoMemStart + size);
            if (videoMemStart + size > memEnd)
            {
                memEnd = videoMemStart + size;
            }
        }
        public float GetTextureRatio()
        {
            return (float)texture.width / texture.height;
        }
    }

    GraphicsMode[] modes;
    Color[] palette = new Color[256];
    ComputerMemory mem;
    int currentMode = 0;
    bool needRedraw = false;
    bool needPaletteChange = false;

    void Start () {
        mem = GetComponent<ComputerMemory>();
        modes = new GraphicsMode[4];
        modes[0] = new GraphicsMode(charWidth * textWidth, charHeight * textHeight, 2);
        modes[1] = new GraphicsMode(800, 600, 2);
        modes[2] = new GraphicsMode(800, 600, 1);
        modes[3] = new GraphicsMode(1024, 768, 2);
        ComputerMemory.MemoryRange screenRange = new ComputerMemory.MemoryRange(videoMemStart, memEnd);
        mem.Subscribe("Screen", screenRange, OnScreenMemoryChange);
        ComputerMemory.MemoryRange paletteRange = new ComputerMemory.MemoryRange(paletteStart, paletteEnd);
        mem.Subscribe("ScreenPalette", paletteRange, OnPaletteChange);
        ComputerMemory.MemoryRange modeTriggerRange = new ComputerMemory.MemoryRange(modeTrigger, modeTrigger);
        mem.Subscribe("ScreenModeTrigger", modeTriggerRange, OnModeChange);

        SwitchMode(0);
        SetDefaultPalette();
        SetDefaultCharset();
        isReady = true;
        
        // WriteTestScreen();
        // WriteTestText();

    }

    void SetDefaultCharset()
    {
        uint addr = charsetStart;
        for (int i = 0; i < 2048; i++)
        {
            mem.Write8(addr++, DefaultCharset[i]);
        }
    }

    void SetDefaultPalette()
    {
        uint addr = paletteStart;
        for (int i = 0; i < 768; i++)
        {
            mem.Write8(addr++, DefaultPalette256[i]);
        }
    }

    void SwitchMode(int mode)
    {
        currentMode = mode;
        renderImage.texture = modes[currentMode].texture;
        needRedraw = true;
    }

    void WriteTestScreen()
    {
        byte c = 0;
        GraphicsMode mode = modes[currentMode];
        for (int i = 0; i < mode.texture.width * mode.texture.height / mode.pixelsPerByte; i++)
        {
            ComputerMemory.memory[videoMemStart + i] = c;
            c++;
        }
    }
    void WriteTestText()
    {
        GraphicsMode mode = modes[0];
        byte color = 11;
        string text = "This is a test message from the emulator itself. This has nothing to do with an inner program and is generated by WriteTestText() method of the ComputerScreen  component.";
        uint textAddr = mode.range.start;
        uint colorAddr = mode.range.start + textWidth * textHeight;
        for (int i = 0; i < text.Length; i++)
        {
            mem.Write8(textAddr++, (byte)text[i]);
            mem.Write8(colorAddr++, color);
        }
    }

    public void OnScreenMemoryChange(ComputerMemory.MemoryRange range)
    {
        Debug.Log("Screen memory changed");
        needRedraw = true;
    }

    public void OnPaletteChange(ComputerMemory.MemoryRange range)
    {
        Debug.Log("Palette memory changed");
        needPaletteChange = true;
        needRedraw = true;
    }

    public void OnModeChange(ComputerMemory.MemoryRange range)
    {
        byte mode = ComputerMemory.memory[modeTrigger];
        SwitchMode(mode);
    }
	
	void Update ()
    {
        SetRenderImageSize();
        if (needPaletteChange)
        {
            PaletteChange();
        }
        if (needRedraw)
        {
            Redraw();
        }
    }

    void PaletteChange()
    {
        Debug.Log("Reading new palette");
        uint addr = paletteStart;
        for (int i = 0; i < 256; i++)
        {
            float r = (float)ComputerMemory.memory[addr++] / 255;
            float g = (float)ComputerMemory.memory[addr++] / 255;
            float b = (float)ComputerMemory.memory[addr++] / 255;
            palette[i] = new Color(r, g, b);
        }
        needPaletteChange = false;
        needRedraw = true;
    }

    void Redraw()
    {
        Debug.Log("Redrawing");

        int colorIndex;
        GraphicsMode mode = modes[currentMode];

        if (currentMode > 0)
        {
            // Graphics Modes
            uint addr;
            Color c;
            int pixelIndex = 0;
            byte data;

            switch (mode.pixelsPerByte)
            {
                case 1:
                    for (addr = mode.range.start; addr < mode.range.end; addr++)
                    {
                        data = ComputerMemory.memory[addr];
                        colorIndex = data;
                        c = palette[colorIndex];
                        mode.pixels[pixelIndex++] = c;
                    }
                    break;
                case 2:
                    for (addr = mode.range.start; addr < mode.range.end; addr++)
                    {
                        data = ComputerMemory.memory[addr];
                        colorIndex = (data & 0xF0) >> 4;
                        c = palette[colorIndex];
                        mode.pixels[pixelIndex++] = c;

                        colorIndex = data & 0x0F;
                        c = palette[colorIndex];
                        mode.pixels[pixelIndex++] = c;
                    }
                    break;
            }
        } else
        {
            // Text Mode

            uint textAddr = mode.range.start;
            uint colorAddr = mode.range.start + textWidth * textHeight;
            int charIndex = 0;
            byte charLine;
            int textureOffset;
            Color fg, bg;

            while (charIndex < textWidth * textHeight)
            {
                byte charData = ComputerMemory.memory[textAddr++];
                byte colorData = ComputerMemory.memory[colorAddr++];
                colorIndex = (colorData & 0xF0) >> 4;
                bg = palette[colorIndex];
                colorIndex = colorData & 0x0F;
                fg = palette[colorIndex];
                uint charsetAddr = charsetStart + (uint)(charData * charHeight);
                
                for (int i = 0; i < charHeight; i++)
                {
                    charLine = ComputerMemory.memory[charsetAddr++];
                    textureOffset = TextureOffset(charIndex, i);
                    for (int x = 7; x >= 0; x--)
                    {
                        if (((charLine >> x)&0x01) == 1)
                        {
                            mode.pixels[textureOffset++] = fg;
                        }
                        else
                        {
                            mode.pixels[textureOffset++] = bg;
                        }
                    }
                }
                charIndex++;
            }
        }
        mode.texture.SetPixels(mode.pixels);
        mode.texture.Apply();
        needRedraw = false;
    }

    int TextureOffset(int charIndex, int lineNumber)
    {
        return textWidth * charWidth * charHeight * (charIndex / textWidth) + (lineNumber * textWidth * charWidth) + ((charIndex % textWidth) * charWidth);
    }

    private void SetRenderImageSize()
    {
        float screenRatio, textureRatio, height, width;
        screenRatio = (float)Screen.width / Screen.height;
        if (currentMode == 0)
        {
            textureRatio = 4f / 3f;
        } 
        else
        {
            Texture2D currentTexture = modes[currentMode].texture;
            textureRatio = (float)currentTexture.width / currentTexture.height;
        }
        if (screenRatio >= textureRatio)
        {
            height = Screen.height;
            width = height * textureRatio;
        }
        else
        {
            width = Screen.width;
            height = width / textureRatio;
        }
        renderImage.rectTransform.sizeDelta = new Vector2(width, height);
    }
}
